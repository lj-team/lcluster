// Code generated by protoc-gen-go. DO NOT EDIT.
// source: LCPROTO.proto

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	LCPROTO.proto

It has these top-level messages:
	LCPROTO
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type LCPROTO_Code int32

const (
	LCPROTO_NOP          LCPROTO_Code = 0
	LCPROTO_RESP         LCPROTO_Code = 1
	LCPROTO_LOG          LCPROTO_Code = 2
	LCPROTO_SET          LCPROTO_Code = 3
	LCPROTO_SETNX        LCPROTO_Code = 4
	LCPROTO_GET          LCPROTO_Code = 5
	LCPROTO_DEC          LCPROTO_Code = 6
	LCPROTO_DECBY        LCPROTO_Code = 7
	LCPROTO_DECR         LCPROTO_Code = 8
	LCPROTO_DEL          LCPROTO_Code = 9
	LCPROTO_DELR         LCPROTO_Code = 10
	LCPROTO_HAS          LCPROTO_Code = 11
	LCPROTO_INC          LCPROTO_Code = 12
	LCPROTO_INCBY        LCPROTO_Code = 13
	LCPROTO_INCR         LCPROTO_Code = 14
	LCPROTO_HKILL        LCPROTO_Code = 15
	LCPROTO_HALL         LCPROTO_Code = 16
	LCPROTO_HKEYS        LCPROTO_Code = 17
	LCPROTO_ZKILL        LCPROTO_Code = 18
	LCPROTO_ZRANGE       LCPROTO_Code = 19
	LCPROTO_ZRANGESIZE   LCPROTO_Code = 20
	LCPROTO_HKEYSLIMIT   LCPROTO_Code = 21
	LCPROTO_HKEYSTOTAL   LCPROTO_Code = 22
	LCPROTO_KEYTOTAL     LCPROTO_Code = 23
	LCPROTO_BITAND       LCPROTO_Code = 24
	LCPROTO_BITOR        LCPROTO_Code = 25
	LCPROTO_BITXOR       LCPROTO_Code = 26
	LCPROTO_HKEYSRANDOM  LCPROTO_Code = 27
	LCPROTO_SETR         LCPROTO_Code = 28
	LCPROTO_C_SETIFMORE  LCPROTO_Code = 29
	LCPROTO_C_SET        LCPROTO_Code = 30
	LCPROTO_C_GET        LCPROTO_Code = 31
	LCPROTO_C_GETINT     LCPROTO_Code = 32
	LCPROTO_C_DEL        LCPROTO_Code = 33
	LCPROTO_C_INC        LCPROTO_Code = 34
	LCPROTO_C_DEC        LCPROTO_Code = 35
	LCPROTO_C_HAS        LCPROTO_Code = 36
	LCPROTO_C_SETNX      LCPROTO_Code = 37
	LCPROTO_C_BITAND     LCPROTO_Code = 38
	LCPROTO_C_BITOR      LCPROTO_Code = 39
	LCPROTO_C_BITXOR     LCPROTO_Code = 40
	LCPROTO_C_BITANDNOT  LCPROTO_Code = 41
	LCPROTO_C_ZKILL      LCPROTO_Code = 42
	LCPROTO_C_ZRANGE     LCPROTO_Code = 43
	LCPROTO_C_ZRANGESIZE LCPROTO_Code = 44
	LCPROTO_C_HKILL      LCPROTO_Code = 45
	LCPROTO_C_HKEYS      LCPROTO_Code = 46
	LCPROTO_C_HSIZE      LCPROTO_Code = 47
	LCPROTO_C_HKEYSRAND  LCPROTO_Code = 48
	LCPROTO_C_KEYTOTAL   LCPROTO_Code = 49
	LCPROTO_C_NOP        LCPROTO_Code = 50
	LCPROTO_C_HALL       LCPROTO_Code = 51
)

var LCPROTO_Code_name = map[int32]string{
	0:  "NOP",
	1:  "RESP",
	2:  "LOG",
	3:  "SET",
	4:  "SETNX",
	5:  "GET",
	6:  "DEC",
	7:  "DECBY",
	8:  "DECR",
	9:  "DEL",
	10: "DELR",
	11: "HAS",
	12: "INC",
	13: "INCBY",
	14: "INCR",
	15: "HKILL",
	16: "HALL",
	17: "HKEYS",
	18: "ZKILL",
	19: "ZRANGE",
	20: "ZRANGESIZE",
	21: "HKEYSLIMIT",
	22: "HKEYSTOTAL",
	23: "KEYTOTAL",
	24: "BITAND",
	25: "BITOR",
	26: "BITXOR",
	27: "HKEYSRANDOM",
	28: "SETR",
	29: "C_SETIFMORE",
	30: "C_SET",
	31: "C_GET",
	32: "C_GETINT",
	33: "C_DEL",
	34: "C_INC",
	35: "C_DEC",
	36: "C_HAS",
	37: "C_SETNX",
	38: "C_BITAND",
	39: "C_BITOR",
	40: "C_BITXOR",
	41: "C_BITANDNOT",
	42: "C_ZKILL",
	43: "C_ZRANGE",
	44: "C_ZRANGESIZE",
	45: "C_HKILL",
	46: "C_HKEYS",
	47: "C_HSIZE",
	48: "C_HKEYSRAND",
	49: "C_KEYTOTAL",
	50: "C_NOP",
	51: "C_HALL",
}
var LCPROTO_Code_value = map[string]int32{
	"NOP":          0,
	"RESP":         1,
	"LOG":          2,
	"SET":          3,
	"SETNX":        4,
	"GET":          5,
	"DEC":          6,
	"DECBY":        7,
	"DECR":         8,
	"DEL":          9,
	"DELR":         10,
	"HAS":          11,
	"INC":          12,
	"INCBY":        13,
	"INCR":         14,
	"HKILL":        15,
	"HALL":         16,
	"HKEYS":        17,
	"ZKILL":        18,
	"ZRANGE":       19,
	"ZRANGESIZE":   20,
	"HKEYSLIMIT":   21,
	"HKEYSTOTAL":   22,
	"KEYTOTAL":     23,
	"BITAND":       24,
	"BITOR":        25,
	"BITXOR":       26,
	"HKEYSRANDOM":  27,
	"SETR":         28,
	"C_SETIFMORE":  29,
	"C_SET":        30,
	"C_GET":        31,
	"C_GETINT":     32,
	"C_DEL":        33,
	"C_INC":        34,
	"C_DEC":        35,
	"C_HAS":        36,
	"C_SETNX":      37,
	"C_BITAND":     38,
	"C_BITOR":      39,
	"C_BITXOR":     40,
	"C_BITANDNOT":  41,
	"C_ZKILL":      42,
	"C_ZRANGE":     43,
	"C_ZRANGESIZE": 44,
	"C_HKILL":      45,
	"C_HKEYS":      46,
	"C_HSIZE":      47,
	"C_HKEYSRAND":  48,
	"C_KEYTOTAL":   49,
	"C_NOP":        50,
	"C_HALL":       51,
}

func (x LCPROTO_Code) String() string {
	return proto.EnumName(LCPROTO_Code_name, int32(x))
}
func (LCPROTO_Code) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

type LCPROTO struct {
	Code    LCPROTO_Code `protobuf:"varint,1,opt,name=code,enum=pb.LCPROTO_Code" json:"code,omitempty"`
	Key     []byte       `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Value   []byte       `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	List    [][]byte     `protobuf:"bytes,4,rep,name=list,proto3" json:"list,omitempty"`
	Counter int32        `protobuf:"varint,5,opt,name=counter" json:"counter,omitempty"`
	Sync    bool         `protobuf:"varint,6,opt,name=sync" json:"sync,omitempty"`
	Ivalue  int64        `protobuf:"varint,7,opt,name=ivalue" json:"ivalue,omitempty"`
}

func (m *LCPROTO) Reset()                    { *m = LCPROTO{} }
func (m *LCPROTO) String() string            { return proto.CompactTextString(m) }
func (*LCPROTO) ProtoMessage()               {}
func (*LCPROTO) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *LCPROTO) GetCode() LCPROTO_Code {
	if m != nil {
		return m.Code
	}
	return LCPROTO_NOP
}

func (m *LCPROTO) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *LCPROTO) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *LCPROTO) GetList() [][]byte {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *LCPROTO) GetCounter() int32 {
	if m != nil {
		return m.Counter
	}
	return 0
}

func (m *LCPROTO) GetSync() bool {
	if m != nil {
		return m.Sync
	}
	return false
}

func (m *LCPROTO) GetIvalue() int64 {
	if m != nil {
		return m.Ivalue
	}
	return 0
}

func init() {
	proto.RegisterType((*LCPROTO)(nil), "pb.LCPROTO")
	proto.RegisterEnum("pb.LCPROTO_Code", LCPROTO_Code_name, LCPROTO_Code_value)
}

func init() { proto.RegisterFile("LCPROTO.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 514 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x3c, 0x53, 0xdb, 0x72, 0xda, 0x30,
	0x10, 0xad, 0xb1, 0xb1, 0x89, 0x20, 0x64, 0xab, 0xa6, 0xa9, 0x7b, 0x77, 0x69, 0xda, 0xba, 0x37,
	0xda, 0x26, 0x5f, 0x60, 0x8c, 0x0a, 0x9a, 0x08, 0x99, 0x91, 0xf5, 0x00, 0xbc, 0x64, 0x0a, 0xe1,
	0x21, 0xd3, 0x4c, 0x60, 0x12, 0xd2, 0x99, 0xfc, 0x56, 0x3f, 0xb0, 0xd3, 0x59, 0xad, 0xe1, 0xed,
	0x5c, 0x76, 0x57, 0xab, 0x23, 0x9b, 0xed, 0xab, 0x7c, 0x6c, 0x0a, 0x5b, 0x74, 0xd7, 0x37, 0xab,
	0xcd, 0x8a, 0xd7, 0xd6, 0xf3, 0xce, 0xdf, 0x90, 0x45, 0x95, 0xca, 0x8f, 0x59, 0xb0, 0x58, 0x5d,
	0x2c, 0x63, 0x2f, 0xf1, 0xd2, 0xf6, 0x09, 0x74, 0xd7, 0xf3, 0xee, 0xb6, 0x21, 0x5f, 0x5d, 0x2c,
	0x8d, 0x73, 0x39, 0x30, 0xff, 0xf7, 0xf2, 0x3e, 0xae, 0x25, 0x5e, 0xda, 0x32, 0x08, 0xf9, 0x21,
	0xab, 0xff, 0xf9, 0x75, 0x75, 0xb7, 0x8c, 0x7d, 0xa7, 0x11, 0xe1, 0x9c, 0x05, 0x57, 0x97, 0xb7,
	0x9b, 0x38, 0x48, 0xfc, 0xb4, 0x65, 0x1c, 0xe6, 0x31, 0x8b, 0x16, 0xab, 0xbb, 0xeb, 0xcd, 0xf2,
	0x26, 0xae, 0x27, 0x5e, 0x5a, 0x37, 0x5b, 0x8a, 0xd5, 0xb7, 0xf7, 0xd7, 0x8b, 0x38, 0x4c, 0xbc,
	0xb4, 0x61, 0x1c, 0xe6, 0x47, 0x2c, 0xbc, 0xa4, 0xc1, 0x51, 0xe2, 0xa5, 0xbe, 0xa9, 0x58, 0xe7,
	0x5f, 0xc0, 0x02, 0x5c, 0x88, 0x47, 0xcc, 0xd7, 0xc5, 0x18, 0x1e, 0xf0, 0x06, 0x0b, 0x8c, 0x28,
	0xc7, 0xe0, 0xa1, 0xa4, 0x8a, 0x01, 0xd4, 0x10, 0x94, 0xc2, 0x82, 0xcf, 0xf7, 0x58, 0xbd, 0x14,
	0x56, 0x4f, 0x20, 0x40, 0x6d, 0x20, 0x2c, 0xd4, 0x11, 0xf4, 0x45, 0x0e, 0x21, 0x9a, 0x7d, 0x91,
	0xf7, 0xa6, 0x10, 0xe1, 0x8c, 0xbe, 0xc8, 0x0d, 0x34, 0xc8, 0x55, 0xb0, 0x47, 0x92, 0x32, 0xc0,
	0x50, 0x1a, 0x66, 0x25, 0x34, 0x11, 0x48, 0x9d, 0x43, 0x0b, 0x3b, 0xa5, 0xc6, 0xce, 0x7d, 0x2c,
	0x93, 0x3a, 0x37, 0xd0, 0x46, 0x71, 0x78, 0x26, 0x95, 0x82, 0x03, 0x14, 0x87, 0x99, 0x52, 0x00,
	0x24, 0x8a, 0x69, 0x09, 0x0f, 0x11, 0xce, 0x9c, 0xcf, 0x39, 0x63, 0xe1, 0xcc, 0x64, 0x7a, 0x20,
	0xe0, 0x11, 0x6f, 0x33, 0x46, 0xb8, 0x94, 0x33, 0x01, 0x87, 0xc8, 0x5d, 0x87, 0x92, 0x23, 0x69,
	0xe1, 0xf1, 0x8e, 0xdb, 0xc2, 0x66, 0x0a, 0x8e, 0x78, 0x8b, 0x35, 0xce, 0xc4, 0x94, 0xd8, 0x13,
	0x9c, 0xd4, 0x93, 0x36, 0xd3, 0x7d, 0x88, 0xf1, 0x80, 0x9e, 0xb4, 0x85, 0x81, 0xa7, 0x95, 0x3c,
	0x29, 0x0c, 0x3c, 0xe3, 0x07, 0xac, 0xe9, 0x06, 0x98, 0x4c, 0xf7, 0x8b, 0x11, 0x3c, 0xc7, 0xed,
	0x4a, 0x61, 0x0d, 0xbc, 0x40, 0x2b, 0x3f, 0x2f, 0x85, 0x95, 0x3f, 0x47, 0x85, 0x11, 0xf0, 0x12,
	0x47, 0x38, 0x01, 0x5e, 0x11, 0xc4, 0xc4, 0x5e, 0xe3, 0x91, 0x0e, 0x4a, 0x6d, 0x21, 0x21, 0x03,
	0x33, 0x7a, 0x43, 0x10, 0x23, 0xe9, 0x6c, 0xd5, 0x1c, 0xde, 0x12, 0xc4, 0xc4, 0x8e, 0x79, 0x93,
	0x45, 0x6e, 0x9e, 0x9e, 0xc0, 0x3b, 0x1a, 0x53, 0x6d, 0xfb, 0x9e, 0x2c, 0xda, 0xf7, 0xc3, 0xce,
	0xc2, 0x8d, 0x53, 0x5a, 0x8b, 0x0a, 0x75, 0x61, 0xe1, 0x23, 0xd5, 0x52, 0x78, 0x9f, 0xa8, 0xb6,
	0x8a, 0xef, 0x33, 0x07, 0xd6, 0xda, 0x32, 0x17, 0xe0, 0x17, 0x2a, 0xa6, 0x97, 0xf8, 0xba, 0x25,
	0xf8, 0x02, 0xdd, 0x8a, 0xb8, 0xb2, 0x6f, 0x74, 0xc8, 0x2e, 0x18, 0xf8, 0x8e, 0x41, 0xe7, 0xe7,
	0xbb, 0x68, 0x7f, 0xd0, 0x35, 0xf0, 0x13, 0x3b, 0xc1, 0x38, 0xf1, 0x46, 0x4a, 0xc1, 0xe9, 0x3c,
	0x74, 0xff, 0xcf, 0xe9, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0x72, 0x67, 0x19, 0xe9, 0x50, 0x03,
	0x00, 0x00,
}
